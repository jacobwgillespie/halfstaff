{"version":3,"sources":["main.min.js","/source/main.js"],"names":["window","navigator","standalone","curnode","location","document","stop","addEventListener","e","target","test","nodeName","parentNode","href","replace","indexOf","protocol","host","preventDefault","isLocalhost","Boolean","hostname","match","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","console","error"],"mappings":"AAAA,YCCK,eAAgBA,QAAOC,WAAcD,OAAOC,UAAUC,aAAY,WACrE,GAAIC,GAAA,OACEC,EAAWC,SAASD,SACpBE,EAAO,aACbD,UAASE,iBAAiB,QAAS,SAAAC,GAEjC,IADAL,EAAUK,EAAEC,QACHH,EAAMI,KAAKP,EAAQQ,WAC1BR,EAAUA,EAAQS,UAKlB,SAAUT,IAETA,EAAQU,KAAMC,QAAQV,EAASS,KAAM,IAAIE,QAAQ,QAI9C,kBAAmBL,KAAKP,EAAQU,OAEiC,IAAnEV,EAAQU,KAAKE,QAAWX,EAASY,SAAjC,KAA8CZ,EAASa,SAEzDT,EAAEU,iBACFd,EAASS,KAAOV,EAAQU,QAEzB,KAOL,IAAMM,aAAcC,QAAqC,cAA7BpB,OAAOI,SAASiB,UAEX,UAA7BrB,OAAOI,SAASiB,UAEhBrB,OAAOI,SAASiB,SAASC,MACvB,0DAIF,kBAAmBrB,aACW,WAA7BD,OAAOI,SAASY,UAAyBG,cAC5ClB,UAAUsB,cAAcC,SAAS,sBAChCC,KAAK,SAAAC,GAEJA,EAAaC,cAAgB,WAKvB1B,UAAUsB,cAAcK,aAAY,WAGtC,GAAMC,GAAmBH,EAAaI,UAEtCD,GAAiBE,cAAgB,WAC/B,OAAQF,EAAiBG,OACvB,IAAK,YAKH,KAEF,KAAK,YACH,KAAM,IAAIC,OAAM,2DAvB5BhC,SAgCS,SAAAO,GACP0B,QAAQC,MAAM,4CAA6C3B","file":"main-a240f576cb.min.js","sourcesContent":["'use strict';\n\n// Prevent links from openening in Safari on iOS web apps\nif ('standalone' in window.navigator && window.navigator.standalone) {\n  (function () {\n    var curnode = void 0;\n    var location = document.location;\n    var stop = /^(a|html)$/i;\n    document.addEventListener('click', function (e) {\n      curnode = e.target;\n      while (!stop.test(curnode.nodeName)) {\n        curnode = curnode.parentNode;\n      }\n\n      if (\n      // is a link\n      'href' in curnode &&\n      // is not an anchor\n      curnode.href.replace(location.href, '').indexOf('#') && (\n      // either does not have a proper scheme (relative links)\n      !/^[a-z\\+\\.\\-]+:/i.test(curnode.href) ||\n      // or is in the same protocol and domain\n      curnode.href.indexOf(location.protocol + '//' + location.host) === 0)) {\n        e.preventDefault();\n        location.href = curnode.href;\n      }\n    }, false);\n  })();\n}\n\n// Check to make sure service workers are supported in the current browser,\n// and that the current page is accessed from a secure origin. Using a\n// service worker from an insecure origin will trigger JS console errors. See\n// http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nif ('serviceWorker' in navigator && (window.location.protocol === 'https:' || isLocalhost)) {\n  navigator.serviceWorker.register('/service-worker.js').then(function (registration) {\n    // updatefound is fired if service-worker.js changes.\n    registration.onupdatefound = function () {\n      // eslint-disable-line no-param-reassign\n      // updatefound is also fired the very first time the SW is installed,\n      // and there's no need to prompt for a reload at that point.\n      // So check here to see if the page is already controlled,\n      // i.e. whether there's an existing service worker.\n      if (navigator.serviceWorker.controller) {\n        (function () {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function () {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' + 'service worker became redundant.');\n\n              default:\n              // Ignore\n            }\n          };\n        })();\n      }\n    };\n  }).catch(function (e) {\n    console.error('Error during service worker registration:', e); // eslint-disable-line no-console\n  });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsSUFBSyxnQkFBZ0IsT0FBTyxTQUF4QixJQUFzQyxPQUFPLFNBQVAsQ0FBaUIsVUFBM0QsRUFBdUU7QUFBQTtBQUNyRSxRQUFJLGdCQUFKO0FBQ0EsUUFBTSxXQUFXLFNBQVMsUUFBMUI7QUFDQSxRQUFNLE9BQU8sYUFBYjtBQUNBLGFBQVMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsYUFBSztBQUN0QyxnQkFBVSxFQUFFLE1BQVo7QUFDQSxhQUFPLENBQUUsSUFBRCxDQUFPLElBQVAsQ0FBWSxRQUFRLFFBQXBCLENBQVIsRUFBdUM7QUFDckMsa0JBQVUsUUFBUSxVQUFsQjtBQUNEOztBQUVEOztBQUVFLGdCQUFVLE9BQVY7O0FBRUMsY0FBUSxJQUFULENBQWUsT0FBZixDQUF1QixTQUFTLElBQWhDLEVBQXNDLEVBQXRDLEVBQTBDLE9BQTFDLENBQWtELEdBQWxELENBRkE7O0FBTUUsT0FBRSxpQkFBRCxDQUFvQixJQUFwQixDQUF5QixRQUFRLElBQWpDLENBQUQ7O0FBRUEsY0FBUSxJQUFSLENBQWEsT0FBYixDQUF3QixTQUFTLFFBQWpDLFVBQThDLFNBQVMsSUFBdkQsTUFBbUUsQ0FSckUsQ0FGRixFQVdFO0FBQ0EsVUFBRSxjQUFGO0FBQ0EsaUJBQVMsSUFBVCxHQUFnQixRQUFRLElBQXhCO0FBQ0Q7QUFDRixLQXJCRCxFQXFCRyxLQXJCSDtBQUpxRTtBQTBCdEU7Ozs7OztBQU1ELElBQU0sY0FBYyxRQUFRLE9BQU8sUUFBUCxDQUFnQixRQUFoQixLQUE2QixXQUE3Qjs7QUFFeEIsT0FBTyxRQUFQLENBQWdCLFFBQWhCLEtBQTZCLE9BRkw7O0FBSXhCLE9BQU8sUUFBUCxDQUFnQixRQUFoQixDQUF5QixLQUF6QixDQUNFLHdEQURGLENBSmdCLENBQXBCOztBQVNBLElBQUksbUJBQW1CLFNBQW5CLEtBQ0MsT0FBTyxRQUFQLENBQWdCLFFBQWhCLEtBQTZCLFFBQTdCLElBQXlDLFdBRDFDLENBQUosRUFDNEQ7QUFDMUQsWUFBVSxhQUFWLENBQXdCLFFBQXhCLENBQWlDLG9CQUFqQyxFQUNDLElBREQsQ0FDTSx3QkFBZ0I7O0FBRXBCLGlCQUFhLGFBQWIsR0FBNkIsWUFBTTs7Ozs7O0FBS2pDLFVBQUksVUFBVSxhQUFWLENBQXdCLFVBQTVCLEVBQXdDO0FBQUE7OztBQUd0QyxjQUFNLG1CQUFtQixhQUFhLFVBQXRDOztBQUVBLDJCQUFpQixhQUFqQixHQUFpQyxZQUFNO0FBQ3JDLG9CQUFRLGlCQUFpQixLQUF6QjtBQUNFLG1CQUFLLFdBQUw7Ozs7O0FBS0U7O0FBRUYsbUJBQUssV0FBTDtBQUNFLHNCQUFNLElBQUksS0FBSixDQUFVLG9CQUNBLGtDQURWLENBQU47O0FBR0Y7O0FBWkY7QUFlRCxXQWhCRDtBQUxzQztBQXNCdkM7QUFDRixLQTVCRDtBQTZCRCxHQWhDRCxFQWdDRyxLQWhDSCxDQWdDUyxhQUFLO0FBQ1osWUFBUSxLQUFSLENBQWMsMkNBQWQsRUFBMkQsQ0FBM0QsRTtBQUNELEdBbENEO0FBbUNEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQcmV2ZW50IGxpbmtzIGZyb20gb3BlbmVuaW5nIGluIFNhZmFyaSBvbiBpT1Mgd2ViIGFwcHNcbmlmICgoJ3N0YW5kYWxvbmUnIGluIHdpbmRvdy5uYXZpZ2F0b3IpICYmIHdpbmRvdy5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkge1xuICBsZXQgY3Vybm9kZTtcbiAgY29uc3QgbG9jYXRpb24gPSBkb2N1bWVudC5sb2NhdGlvbjtcbiAgY29uc3Qgc3RvcCA9IC9eKGF8aHRtbCkkL2k7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgY3Vybm9kZSA9IGUudGFyZ2V0O1xuICAgIHdoaWxlICghKHN0b3ApLnRlc3QoY3Vybm9kZS5ub2RlTmFtZSkpIHtcbiAgICAgIGN1cm5vZGUgPSBjdXJub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgLy8gaXMgYSBsaW5rXG4gICAgICAnaHJlZicgaW4gY3Vybm9kZSAmJlxuICAgICAgLy8gaXMgbm90IGFuIGFuY2hvclxuICAgICAgKGN1cm5vZGUuaHJlZikucmVwbGFjZShsb2NhdGlvbi5ocmVmLCAnJykuaW5kZXhPZignIycpICYmXG5cbiAgICAgIChcbiAgICAgICAgLy8gZWl0aGVyIGRvZXMgbm90IGhhdmUgYSBwcm9wZXIgc2NoZW1lIChyZWxhdGl2ZSBsaW5rcylcbiAgICAgICAgISgvXlthLXpcXCtcXC5cXC1dKzovaSkudGVzdChjdXJub2RlLmhyZWYpIHx8XG4gICAgICAgIC8vIG9yIGlzIGluIHRoZSBzYW1lIHByb3RvY29sIGFuZCBkb21haW5cbiAgICAgICAgY3Vybm9kZS5ocmVmLmluZGV4T2YoYCR7bG9jYXRpb24ucHJvdG9jb2x9Ly8ke2xvY2F0aW9uLmhvc3R9YCkgPT09IDApXG4gICAgKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsb2NhdGlvbi5ocmVmID0gY3Vybm9kZS5ocmVmO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xufVxuXG4vLyBDaGVjayB0byBtYWtlIHN1cmUgc2VydmljZSB3b3JrZXJzIGFyZSBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlcixcbi8vIGFuZCB0aGF0IHRoZSBjdXJyZW50IHBhZ2UgaXMgYWNjZXNzZWQgZnJvbSBhIHNlY3VyZSBvcmlnaW4uIFVzaW5nIGFcbi8vIHNlcnZpY2Ugd29ya2VyIGZyb20gYW4gaW5zZWN1cmUgb3JpZ2luIHdpbGwgdHJpZ2dlciBKUyBjb25zb2xlIGVycm9ycy4gU2VlXG4vLyBodHRwOi8vd3d3LmNocm9taXVtLm9yZy9Ib21lL2Nocm9taXVtLXNlY3VyaXR5L3ByZWZlci1zZWN1cmUtb3JpZ2lucy1mb3ItcG93ZXJmdWwtbmV3LWZlYXR1cmVzXG5jb25zdCBpc0xvY2FsaG9zdCA9IEJvb2xlYW4od2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fFxuICAgIC8vIFs6OjFdIGlzIHRoZSBJUHY2IGxvY2FsaG9zdCBhZGRyZXNzLlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ1s6OjFdJyB8fFxuICAgIC8vIDEyNy4wLjAuMS84IGlzIGNvbnNpZGVyZWQgbG9jYWxob3N0IGZvciBJUHY0LlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5tYXRjaChcbiAgICAgIC9eMTI3KD86XFwuKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSl7M30kL1xuICAgIClcbiAgKTtcblxuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IgJiZcbiAgICAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyB8fCBpc0xvY2FsaG9zdCkpIHtcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy9zZXJ2aWNlLXdvcmtlci5qcycpXG4gIC50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgLy8gdXBkYXRlZm91bmQgaXMgZmlyZWQgaWYgc2VydmljZS13b3JrZXIuanMgY2hhbmdlcy5cbiAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9ICgpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgLy8gdXBkYXRlZm91bmQgaXMgYWxzbyBmaXJlZCB0aGUgdmVyeSBmaXJzdCB0aW1lIHRoZSBTVyBpcyBpbnN0YWxsZWQsXG4gICAgICAvLyBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHByb21wdCBmb3IgYSByZWxvYWQgYXQgdGhhdCBwb2ludC5cbiAgICAgIC8vIFNvIGNoZWNrIGhlcmUgdG8gc2VlIGlmIHRoZSBwYWdlIGlzIGFscmVhZHkgY29udHJvbGxlZCxcbiAgICAgIC8vIGkuZS4gd2hldGhlciB0aGVyZSdzIGFuIGV4aXN0aW5nIHNlcnZpY2Ugd29ya2VyLlxuICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gVGhlIHVwZGF0ZWZvdW5kIGV2ZW50IGltcGxpZXMgdGhhdCByZWdpc3RyYXRpb24uaW5zdGFsbGluZyBpcyBzZXQ6XG4gICAgICAgIC8vIGh0dHBzOi8vc2xpZ2h0bHlvZmYuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvc3BlYy9zZXJ2aWNlX3dvcmtlci9pbmRleC5odG1sI3NlcnZpY2Utd29ya2VyLWNvbnRhaW5lci11cGRhdGVmb3VuZC1ldmVudFxuICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmc7XG5cbiAgICAgICAgaW5zdGFsbGluZ1dvcmtlci5vbnN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnaW5zdGFsbGVkJzpcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIG9sZCBjb250ZW50IHdpbGwgaGF2ZSBiZWVuIHB1cmdlZCBhbmQgdGhlXG4gICAgICAgICAgICAgIC8vIGZyZXNoIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBwZXJmZWN0IHRpbWUgdG8gZGlzcGxheSBhIFwiTmV3IGNvbnRlbnQgaXNcbiAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlOyBwbGVhc2UgcmVmcmVzaC5cIiBtZXNzYWdlIGluIHRoZSBwYWdlJ3MgaW50ZXJmYWNlLlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncmVkdW5kYW50JzpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5zdGFsbGluZyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZXJ2aWNlIHdvcmtlciBiZWNhbWUgcmVkdW5kYW50LicpO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSkuY2F0Y2goZSA9PiB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9\n","// Prevent links from openening in Safari on iOS web apps\nif (('standalone' in window.navigator) && window.navigator.standalone) {\n  let curnode;\n  const location = document.location;\n  const stop = /^(a|html)$/i;\n  document.addEventListener('click', e => {\n    curnode = e.target;\n    while (!(stop).test(curnode.nodeName)) {\n      curnode = curnode.parentNode;\n    }\n\n    if (\n      // is a link\n      'href' in curnode &&\n      // is not an anchor\n      (curnode.href).replace(location.href, '').indexOf('#') &&\n\n      (\n        // either does not have a proper scheme (relative links)\n        !(/^[a-z\\+\\.\\-]+:/i).test(curnode.href) ||\n        // or is in the same protocol and domain\n        curnode.href.indexOf(`${location.protocol}//${location.host}`) === 0)\n    ) {\n      e.preventDefault();\n      location.href = curnode.href;\n    }\n  }, false);\n}\n\n// Check to make sure service workers are supported in the current browser,\n// and that the current page is accessed from a secure origin. Using a\n// service worker from an insecure origin will trigger JS console errors. See\n// http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n  );\n\nif ('serviceWorker' in navigator &&\n    (window.location.protocol === 'https:' || isLocalhost)) {\n  navigator.serviceWorker.register('/service-worker.js')\n  .then(registration => {\n    // updatefound is fired if service-worker.js changes.\n    registration.onupdatefound = () => { // eslint-disable-line no-param-reassign\n      // updatefound is also fired the very first time the SW is installed,\n      // and there's no need to prompt for a reload at that point.\n      // So check here to see if the page is already controlled,\n      // i.e. whether there's an existing service worker.\n      if (navigator.serviceWorker.controller) {\n        // The updatefound event implies that registration.installing is set:\n        // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n        const installingWorker = registration.installing;\n\n        installingWorker.onstatechange = () => {\n          switch (installingWorker.state) {\n            case 'installed':\n              // At this point, the old content will have been purged and the\n              // fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in the page's interface.\n              break;\n\n            case 'redundant':\n              throw new Error('The installing ' +\n                              'service worker became redundant.');\n\n            default:\n              // Ignore\n          }\n        };\n      }\n    };\n  }).catch(e => {\n    console.error('Error during service worker registration:', e); // eslint-disable-line no-console\n  });\n}\n"],"sourceRoot":"/source/"}